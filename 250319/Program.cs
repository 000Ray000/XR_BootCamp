using System.ComponentModel.Design;
using System.Reflection.PortableExecutable;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace _250319
{
    internal class Program
    {
        static void Main(string[] args)
        {
            bool gameOver = false;

            Position playerPos;
            Position alphaPos;
            Position overPos;
            Position originAlphaPos;
            char[,] map;

            Start(out playerPos, out alphaPos, out overPos, out map);

            while (gameOver == false)
            {
                Render(playerPos, map);
                ConsoleKey input = Input();
                Update(input, ref playerPos, ref alphaPos, ref overPos, ref originAlphaPos, map);
            }

            End();

        }

        // 플레이어 위치 
        struct Position
        {
            public int x;
            public int y;
        }


        // 함수 모음

        // 플레이어 출력 함수
        static void PrintPlayer(Position playerPos)
        {
            // 기존 위치 지우기
            Console.Clear();
            // 플레이어 위치로 커서 옮기기
            Console.SetCursorPosition(playerPos.x, playerPos.y);
            // 플레이어 출력 
            Console.Write("◆");
        }

        //맵 출력 함수
        static void PrintMap(char[,] map)
        {
            for (int y = 0; y < map.GetLength(0); y++)
            {
                for (int x = 0; x < map.GetLength(1); x++)
                {
                    Console.Write(map[y, x]);
                }
                Console.WriteLine();
            }
        }



        // 초기 설정 
        static void Start(out Position playerPos, out Position alphaPos, out char[,] map)
        {
            // 사용자의 초기 위치 
            playerPos.x = 2;
            playerPos.y = 17;

            // 위치 관련 값들 초기값 할당 <- 다른 함수로 묶어서 없애야 하지 않은가.
            alphaPos.x = 0;
            alphaPos.y = 0;

            alphaPos.x = 0;
            alphaPos.y = 0;


            // 맵의 초기 모양

            map = new char[18, 21]
            {
              //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21
          /*1*/{ '■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■' },
          /*2*/{ '■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■' },
          /*3*/{ '■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■' },
          /*4*/{ '■',' ',' ',' ',' ',' ',' ',' ',' ',' ','H',' ',' ',' ',' ',' ','S',' ',' ',' ','■' },         
          /*5*/{ '■',' ',' ',' ',' ',' ',' ',' ',' ',' ','U',' ',' ',' ',' ',' ','U',' ','R',' ','■' },          
          /*6*/{ '■',' ',' ',' ',' ',' ',' ',' ','B',' ','M',' ','K',' ',' ',' ','P',' ','E',' ','■' },          
          /*7*/{ '■',' ',' ',' ','F',' ',' ',' ','O',' ','M',' ','I',' ',' ',' ','R',' ','F',' ','■' },          
          /*8*/{ '■',' ','H',' ',' ',' ','M',' ',' ',' ',' ',' ','R',' ',' ',' ','E',' ',' ',' ','■' },          
          /*9*/{ '■',' ','A',' ','L',' ','O',' ','A',' ','S',' ','B',' ','I',' ','M',' ','A',' ','■' },          
         /*10*/{ '■',' ','P',' ','C',' ','N',' ',' ',' ',' ',' ','Y',' ','N',' ','E',' ','I',' ','■' },          
         /*11*/{ '■',' ','P',' ','O',' ','S',' ',' ',' ',' ',' ',' ',' ','G',' ',' ',' ','N',' ','■' },          
         /*12*/{ '■',' ','Y',' ','N',' ','T',' ',' ',' ',' ',' ',' ',' ','E',' ',' ',' ',' ',' ','■' },          
         /*13*/{ '■',' ',' ',' ',' ',' ','E',' ',' ',' ',' ',' ',' ',' ','R',' ',' ',' ',' ',' ','■' },          
         /*14*/{ '■',' ',' ',' ',' ',' ','R',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■' },          
         /*15*/{ '■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■' },          
         /*16*/{ '■',' ','u','g','a','b','r',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■' },
         /*17*/{ '■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■' },          
         /*18*/{ '■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■','■' },

            };

        }

        // 출력 작업
        static void Render(Position playerPos, char[,] map)
        {
            //커서 포지션을 0,0으로 초기화해주기
            Console.SetCursorPosition(0, 0);

            // 플레이어 출력 
            PrintPlayer(playerPos);

            // 맵 출력
            PrintMap(map);

        }

        // 입력 작업
        static ConsoleKey Input()
        {
            ConsoleKey input = Console.ReadKey(true).Key;
            return input;
        }

        
        // 처리 작업
        static void Update(ConsoleKey input, ref Position playerPos, ref Position alphaPos, ref Position overPos, Position originAlphaPos, char[,] map)
        {
            // 입력 받은 키에 따라 플레이어를 이동시키기
            switch (input)
              {
                case ConsoleKey.A:
                case ConsoleKey.LeftArrow:
                    playerPos.x--;
                    alphaPos.x = playerPos.x - 1;
                    alphaPos.y = playerPos.y;
                    overPos.x = alphaPos.x - 2;
                    overPos.y = alphaPos.y;

                    originAlphaPos.x = alphaPos.x;
                    originAlphaPos.y = alphaPos.y;
                    break;

                case ConsoleKey.D:
                case ConsoleKey.RightArrow:
                    playerPos.x++;
                    alphaPos.x = playerPos.x + 1;
                    alphaPos.y = playerPos.y;
                    overPos.x = alphaPos.x + 2;
                    overPos.y = alphaPos.y;

                    originAlphaPos.x = alphaPos.x;
                    originAlphaPos.y = alphaPos.y;
                    break;

                case ConsoleKey.W:
                case ConsoleKey.UpArrow:
                    playerPos.y--;
                    alphaPos.x = playerPos.x;
                    alphaPos.y = playerPos.y - 1;
                    overPos.x = alphaPos.x;
                    overPos.y = alphaPos.y - 2;

                    originAlphaPos.x = alphaPos.x;
                    originAlphaPos.y = alphaPos.y;
                    break;

                case ConsoleKey.S:
                case ConsoleKey.DownArrow:
                    playerPos.y++;
                    alphaPos.x = playerPos.x;
                    alphaPos.y = playerPos.y + 1;
                    overPos.x = alphaPos.x;
                    overPos.y = alphaPos.y + 2;

                    originAlphaPos.x = alphaPos.x;
                    originAlphaPos.y = alphaPos.y;
                    break;
                }


            //알파벳을 밀어서 움직이기
            /* 
             
             1. 이동 가부 여부 판별
            
                1) 움직이려는 알파벳이 대문자이거나 특수문자인 경우
                : 아무것도 하지 않는다.
                2) 소문자 알파벳인 경우
                
                        2-1. 플레이어 기준 2칸 앞이 빈칸인 경우 
                        : 알파벳을 그 방향으로 한 칸 움직이고, 플레이어도 그 방향으로 한 칸 움직인다.

                        2-2. 플레이어 기준 2칸 앞이 빈칸이 아닌 경우 
                        : 아무것도 하지 않는다.

            */
            // 해당 자리에 소문자가 있다면
            if ('a'>= map[alphaPos.y, alphaPos.x] && map[alphaPos.y, alphaPos.x] <= 'z') 
            {
                //플레이어 기준 2칸 앞이 빈칸이라면
                if (map[overPos.y, overPos.x] == ' ')
                { 
                    // 알파벳을 빈칸으로 움직이고
                    alphaPos.x = overPos.x;
                    alphaPos.y = overPos.y;

                    // 원래 알파벳 위치를 빈칸으로 만들고
                    map[originAlphaPos.y, originAlphaPos.x] = ' ';

                    //플레이어를 원래 알파벳 자리로 옮김
                    playerPos.x = originAlphaPos.x;
                    playerPos.y = originAlphaPos.y;
                }      
            }

            /*
             
            // 알파벳의 정답 처리 여부 (게임오버 여부) 

            1.각 알파벳별로 해당하는 위치에 갔다면 그 단어를 초록색으로 처리해줌.
                1-1. u -> map[8,11]
                1-2. g -> map[8,15]
                1-3. a -> map[8,5]
                1-4. b -> map[8,9]
                1-5. r -> map[8,19]

                이 모든 조건을 만족하면 gameOver == true, 정답 단어도 초록색으로 변경.

            특정 위치의 색을 바꿔야 하는데?

            */

            if (map[8, 11] == 'u')
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.Write('u');
                Console.ResetColor();
            }

            else if (map[8, 15] == 'g')
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.Write('g');
                Console.ResetColor();
            }

            else if (map[8, 5] == 'a')
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.Write('a');
                Console.ResetColor();
            }
            else if (map[8, 9] == 'b')
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.Write('b');
                Console.ResetColor();
            }

            else if (map[8, 19] == 'r')
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.Write('r');
                Console.ResetColor();
            }

            if ()

        }


        // 마무리, 엔딩 
        static void End()
        {
            Console.Clear();
            Console.WriteLine("GAME CLEAR !");
            Console.WriteLine("\r\n\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@!$#@@@@@@@@@@@@@@#$*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@!@@@@#@@@@@@@@@@@@@@@@@@@@@!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@ #=#@@@@@@@@#*-     ~@@~     -*#@@@@@@@@#=# @@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@$@#@@@@@=**-          ~@@~          -!*=@@@@@@@$@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@ $@@@@@=~~.             .$$.             .~~=@@@@@$ @@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@$@@@@@!.                  ..                  .!@@@@@$@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@!@#@@@=~                                            ~=@@@#@!@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@;~                                                :;@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@$@@@=,                                                    ,=@@@$@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@#~                                                        ~#@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@*#@@@*,                                                          ,*@@@#*@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@$@@@-.                                                            .-@@@#@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@#.                                                                .#@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@=,                                                                  ,=@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@!.                                                                    ,!@@@@@@@@@@@@@@\r\n@@@@@@@@@@$@@!                                                                        !@@$@@@@@@@@@@\r\n@@@@@@@@@$@@*.                                                                        .*@@$@@@@@@@@@\r\n@@@@@@@@@@@#,                                                                          ,#@@@@@@@@@@@\r\n@@@@@@@=#@@.                                                                            .@@#=@@@@@@@\r\n@@@@@@@@@@-                                                                              -@@@@@@@@@@\r\n@@@@@@;@@*                                                                               .*@@;@@@@@@\r\n@@@@@@@@#-                                                                                -#@@@@@@@@\r\n@@@@@*@@*                                                                                  *@@*@@@@@\r\n@@@@@@@@,                                                                                  -@@@@@@@@\r\n@@@@#@@$                                                                                    $@@#@@@@\r\n@@@@@@@.                                                                                    .@@@@@@@\r\n@@@@@@@                                                                                      @@@@@@@\r\n@@@@@@!                                                                                      !@@@@@@\r\n@@@@@@-                                                                                      -@@@@@@\r\n@@@@@@,                                                                                      ,@@@@@@\r\n@@@:@@,                                                                                      ,@@:@@@\r\n@@@*@$,                                                                                      ,#@*@@@\r\n@@@@@$.                                                                                      ,$@#@@@\r\n@@@@@=.                                                                                      .=@@@@@\r\n@@@@@=.                                                                                      .=@@@@@\r\n@@@=@#,                                                                                      ,#@=@@@\r\n@@@@@@!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!@@@@@@\r\n@@@$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$@@@\r\n@@$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$@@\r\n@:@@@:........................................................................................:@@@:@\r\n@$@@!..........................................................................................!@@$@\r\n@$@@!...,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*@@$@\r\n@@@@$-,---------------------------------------------------------------------------------------~$@@@@\r\n@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@;~~~~~~~~~~~~~~~~:=@@*                                        *@@=:~~~~~~~~~~~~~~~:!@@@@@@@@\r\n@@@@@@$~~~~~~~~~~~~~~~~~~~;$@@;                                      ;@@$;~~~~~~~~~~~~~~~~~~~$@@@@@@\r\n@@@!@@:~~~~~~~~~~~~~~~~~~~~;#@#~                                    ~#@#;~~~~~~~~~~~~~~~~~~~~;@@!@@@\r\n@@@@@$:~~~~~~~~~~~~~~~~~~~~~:@@@-                                  ,@@@:~~~~~~~~~~~~~~~~~~~~~:#@@@@@\r\n@@@@@$:~~~~~~~~~~~~~~~~~~~~~~;#@@,                                ,@@#;~~~~~~~~~~~~~~~~~~~~~~:$@@@@@\r\n@@@@@$:~~~~~~~~~~~~~~~~~~~~~~~;@@$,                              ,$@@;~~~~~~~~~~~~~~~~~~~~~~~:$@@@@@\r\n@@@@@$:~~~~~~~~~~~~~~~~~~~~~~~~;@@#                              #@@;~~~~~~~~~~~~~~~~~~~~~~~~:$@@@@@\r\n@@@@@$:~~~~~~~~~~~~~~~~~~~~~~~~~:@@@.                          .@@@:~~~~~~~~~~~~~~~~~~~~~~~~~:$@@@@@\r\n@@@@@$:~~~~~~~~~~~~~~~~~~~~~~~~~~;#@#,                        ,#@#;~~~~~~~~~~~~~~~~~~~~~~~~~~:#@@@@@\r\n@@@*@@:~~~~~~~~~~~~~~~~~~~~~~~~~~:!@@$.                      .$@@!:~~~~~~~~~~~~~~~~~~~~~~~~~~;@@!@@@\r\n@@@@@@*~~~~~~~~~~~~~~~~~~~~~~~~~~~~!@@#                      $@@!~~~~~~~~~~~~~~~~~~~~~~~~~~~~*@@@@@@\r\n@@@@#@@*!!!!!!!!!!!!!!!!!!!!!!!!!!!!$@@=.                  .=@@$!!!!!!!!!!!!!!!!!!!!!!!!!!!!=@@#@@@@\r\n@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*.                .*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@\r\n@@@@$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;                ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$@@@@\r\n@@@-@@$,                               $@@~              ~@@$                               ,$@@-@@@\r\n@@@=@#,                                 *@@:            :@@*                                 ,#@=@@@\r\n@@@#@$.                                 .=@@:          :@@=.                                 .$@#@@@\r\n@@@!@#,                                   $@@~        ~@@$                                   ,#@!@@@\r\n@@@ @@,                                   .=@@:.    .:@@=.                                   ,@@ @@@\r\n@@@@@@!                                    .*@@$=**=$@@=.                                    !@@@@@@\r\n@@@@#@@.                                    .=@@@@@@@@=.                                    .@@#@@@@\r\n@@@@@@@#,                                     -*====*-                                     -#@@@@@@@\r\n@@@@ #@@$-                                      ....                                      -$@@#@@@@@\r\n@@@@@*$@@@*                                                                              *@@@$*@@@@@\r\n@@@@@@@$@@@@@$========================================================================$@@@@@=@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@~#@$#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#$@@~@@@@@@@@@\r\n");
        }

        
    
    }
}
